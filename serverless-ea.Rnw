\documentclass[sigconf]{acmart}
%%% Local Variables:
%%% ispell-local-dictionary: "english"
%%% End:

\usepackage{booktabs} % For formal tables


% Copyright
%\setcopyright{none}
%\setcopyright{acmcopyright}
%\setcopyright{acmlicensed}
\setcopyright{rightsretained}
%\setcopyright{usgov}
%\setcopyright{usgovmixed}
%\setcopyright{cagov}
%\setcopyright{cagovmixed}


% DOI
\acmDOI{10.1145/nnnnnnn.nnnnnnn}

% ISBN
\acmISBN{978-x-xxxx-xxxx-x/YY/MM}


%Conference
\acmConference[GECCO '18]{the Genetic and Evolutionary Computation
Conference 2018}{July 15--19, 2018}{Kyoto, Japan}
\acmYear{2018}
\copyrightyear{2018}


\acmArticle{4}
\acmPrice{15.00}

\begin{document}
\title{A modern, event-based architecture for distributed evolutionary algorithms}

\author{Anonymous Author 1}
\orcid{1234-5678-9012}
\affiliation{%
  \institution{Anonymous institute 1}
  \streetaddress{P.O. Box 1212}
  \city{Dublin} 
  \state{Ohio} 
  \postcode{43017-6221}
}
\email{aa1@ai1.com}

\author{Anonymous Author 2}
\affiliation{%
  \institution{Anonymous institute 2}
  \streetaddress{P.O. Box 1212}
  \city{Dublin} 
  \state{Ohio} 
  \postcode{43017-6221}
}
\email{2aa@ai2.com}

% The default list of authors is too long for headers.
\renewcommand{\shortauthors}{A. Author et al.}


\begin{abstract}
  Cloud native applications add a layer of abstraction to the
underlying distributed computing system, creating an abstract,
self-scaling and self-managed architecture of different Microservices
linked by a messaging bus. Creating new algorithms that tap this
architectural patterns and at the same time they employ distributed
resources efficiently is a challenge we will be taking up in this
paper, that is why in this paper we propose KafkEO, a cloud native
framework that allows different implementations of evolutionary
algorithms and other population-based metaheuristics by using
micro-populations and stateless services as the main building
blocks. we introduce an open source implementation that uses OpenWhisk
as a serverless framework and Kafka as messaging hub. In this proof of
concept, we map the traditional evolutionary algorithm to this new
cloud-native format.  As far as we know, this is the first
architecture of this kind; the experiments show that resources are
used efficiently and that the cost to the cloud user is more
competitive, resulting in savings when compared against other cloud
implementations. We also perform an initial analysis of implementation
parameters that show their influence in performance.
\end{abstract}

\begin{CCSXML}
<ccs2012>
<concept>
<concept_id>10003752.10003809.10003716.10011136.10011797.10011799</concept_id>
<concept_desc>Theory of computation~Evolutionary algorithms</concept_desc>
<concept_significance>500</concept_significance>
</concept>
<concept>
<concept_id>10010520.10010521.10010537.10003100</concept_id>
<concept_desc>Computer systems organization~Cloud computing</concept_desc>
<concept_significance>500</concept_significance>
</concept>
<concept>
<concept_id>10010147.10010919.10010172</concept_id>
<concept_desc>Computing methodologies~Distributed algorithms</concept_desc>
<concept_significance>300</concept_significance>
</concept>
</ccs2012>
\end{CCSXML}

\ccsdesc[500]{Theory of computation~Evolutionary algorithms}
\ccsdesc[500]{Computer systems organization~Cloud computing}
\ccsdesc[300]{Computing methodologies~Distributed algorithms}

\keywords{Cloud Computing, microservices, distributed computing,
  event-based systems, Kappa architecture}


\maketitle

\section{Introduction}

Cloud computing is increasingly becoming the dominant way of running
applications nowadays. Besides the convenience of the pay-as-you-go
model, it also offers a way of describing the infrastructure as part
of the code, so that it is much easier to reproduce results. This has
been a boon for scientific computing, but at the same time the shift
from a monolithic sequential or asynchronously parallel architecture
to a these new architectures mean that the scientific workflows and
the algorithms underlying it have to necessarily change. 

  Cloud native applications add a layer of abstraction to the
  underlying distributed computing system, integrating seamlessly
  different elements in a single data flow that is managed by the
  cloud provider, allowing the user to focus on code and connections
  among different services. 

% \begin{table}
%   \caption{Frequency of Special Characters}
%   \label{tab:freq}
%   \begin{tabular}{ccl}
%     \toprule
%     Non-English or Math&Frequency&Comments\\
%     \midrule
%     \O & 1 in 1,000& For Swedish names\\
%     $\pi$ & 1 in 5& Common in math\\
%     \$ & 4 in 5 & Used in business\\
%     $\Psi^2_1$ & 1 in 40,000& Unexplained usage\\
%   \bottomrule
% \end{tabular}
% \end{table}


% It is strongly recommended to use the package booktabs~\cite{Fear05}
% and follow its main principles of typography with respect to tables:
% \begin{enumerate}
% \item Never, ever use vertical rules.
% \item Never use double rules.
% \end{enumerate}
% It is also a good idea not to overuse horizontal rules.


% \begin{figure}
% \includegraphics{fly}
% \caption{A sample black and white graphic.}
% \end{figure}

% \begin{figure}
% \includegraphics[height=1in, width=1in]{fly}
% \caption{A sample black and white graphic
% that has been resized with the \texttt{includegraphics} command.}
% \end{figure}

\section{State of the art}

Although most evolutionary algorithms work in a synchronous way, with
generations proceeding one after the other and migration happening in
all islands at the same time, there have been many efforts from early
on to adapt them to dynamic, heterogeneous software architectures
\cite{Jini:FEA2000}. 

\section{Event based architectures}

The creation of virtualization and isolation mechanisms at many
different levels and the consequent granularization of architectures
has led to systems that are asynchronous and loosely coupled in what
is generally called a microservice architecture. These microservice
architectures share the common trait of consisting in several services
with a single concern, that is, providing a single processing value,
in many case stateless, and coupled using lightweight protocols such
as REST and messaging buses that carry information from every service
to the next. 

\section{Conclusions}

%\end{document}  % This is where a 'short' article might terminate




\begin{acks}

  The author would like to acknowledge the support of grants\\
  taking\\
  this\\
  much\\
  space\\

\end{acks}


\bibliographystyle{ACM-Reference-Format}
\bibliography{serverless} 

\end{document}
